/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/Pet": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": {
              _petType: "plain";
            } & OneOf<[Omit<components["schemas"]["Pet"], "_petType">, components["schemas"]["Dog"], components["schemas"]["Cat"], components["schemas"]["Fish"], components["schemas"]["Labrador"], components["schemas"]["Poodle"]]>;
            "application/json": {
              _petType: "json";
            } & OneOf<[Omit<components["schemas"]["Pet"], "_petType">, components["schemas"]["Dog"], components["schemas"]["Cat"], components["schemas"]["Fish"], components["schemas"]["Labrador"], components["schemas"]["Poodle"]]>;
            "text/json": {
              _petType: "json";
            } & OneOf<[Omit<components["schemas"]["Pet"], "_petType">, components["schemas"]["Dog"], components["schemas"]["Cat"], components["schemas"]["Fish"], components["schemas"]["Labrador"], components["schemas"]["Poodle"]]>;
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Cat: {
      _petType: "Cat";
      hunts?: boolean;
    } & Omit<components["schemas"]["Pet"], "_petType">;
    Dog: {
      _petType: "Dog";
      bark?: boolean;
    } & Omit<components["schemas"]["Pet"], "_petType">;
    Fish: {
      _petType: "Fish";
      swims?: boolean;
    } & Omit<components["schemas"]["Pet"], "_petType">;
    Labrador: {
      assistanceDog?: boolean;
    } & components["schemas"]["Dog"];
    Pet: {
      _petType: string;
      nickName?: string | null;
    };
    Poodle: {
      showDog?: boolean;
    } & components["schemas"]["Dog"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
